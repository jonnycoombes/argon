//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.ServiceModel;

namespace JCS.Argon.Services.Soap.Opentext
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:Core.service.livelink.opentext.com", ConfigurationName="JCS.Argon.Services.Soap.Opentext.ContentService")]
    public interface ContentService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Core.service.livelink.opentext.com/DownloadContent", ReplyAction="urn:Core.service.livelink.opentext.com/ContentService/DownloadContentResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ServiceDataObject))]
        System.Threading.Tasks.Task<JCS.Argon.Services.Soap.Opentext.DownloadContentResponse> DownloadContentAsync(JCS.Argon.Services.Soap.Opentext.DownloadContentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Core.service.livelink.opentext.com/UploadContent", ReplyAction="urn:Core.service.livelink.opentext.com/ContentService/UploadContentResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ServiceDataObject))]
        System.Threading.Tasks.Task<JCS.Argon.Services.Soap.Opentext.UploadContentResponse> UploadContentAsync(JCS.Argon.Services.Soap.Opentext.UploadContentRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:Core.service.livelink.opentext.com")]
    public partial class FileAtts : ServiceDataObject
    {
        
        private System.Nullable<System.DateTime> createdDateField;
        
        private string fileNameField;
        
        private System.Nullable<long> fileSizeField;
        
        private System.Nullable<System.DateTime> modifiedDateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
        public System.Nullable<System.DateTime> CreatedDate
        {
            get
            {
                return this.createdDateField;
            }
            set
            {
                this.createdDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string FileName
        {
            get
            {
                return this.fileNameField;
            }
            set
            {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<long> FileSize
        {
            get
            {
                return this.fileSizeField;
            }
            set
            {
                this.fileSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public System.Nullable<System.DateTime> ModifiedDate
        {
            get
            {
                return this.modifiedDateField;
            }
            set
            {
                this.modifiedDateField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadContent", WrapperNamespace="urn:Core.service.livelink.opentext.com", IsWrapped=true)]
    public partial class DownloadContentRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:api.ecm.opentext.com")]
        public JCS.Argon.Services.Soap.Opentext.OTAuthentication OTAuthentication;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Core.service.livelink.opentext.com", Order=0)]
        public string contextID;
        
        public DownloadContentRequest()
        {
        }
        
        public DownloadContentRequest(JCS.Argon.Services.Soap.Opentext.OTAuthentication OTAuthentication, string contextID)
        {
            this.OTAuthentication = OTAuthentication;
            this.contextID = contextID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadContentResponse", WrapperNamespace="urn:Core.service.livelink.opentext.com", IsWrapped=true)]
    public partial class DownloadContentResponse
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:api.ecm.opentext.com")]
        public JCS.Argon.Services.Soap.Opentext.OTAuthentication OTAuthentication;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Core.service.livelink.opentext.com", Order=0)]
        public System.IO.Stream DownloadContentResult;
        
        public DownloadContentResponse()
        {
        }
        
        public DownloadContentResponse(JCS.Argon.Services.Soap.Opentext.OTAuthentication OTAuthentication, System.IO.Stream DownloadContentResult)
        {
            this.OTAuthentication = OTAuthentication;
            this.DownloadContentResult = DownloadContentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadContent", WrapperNamespace="urn:Core.service.livelink.opentext.com", IsWrapped=true)]
    public partial class UploadContentRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:api.ecm.opentext.com")]
        public JCS.Argon.Services.Soap.Opentext.OTAuthentication OTAuthentication;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Core.service.livelink.opentext.com")]
        public string contextID;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:Core.service.livelink.opentext.com")]
        public JCS.Argon.Services.Soap.Opentext.FileAtts fileAtts;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Core.service.livelink.opentext.com", Order=0)]
        public System.IO.Stream contents;
        
        public UploadContentRequest()
        {
        }
        
        public UploadContentRequest(JCS.Argon.Services.Soap.Opentext.OTAuthentication OTAuthentication, string contextID, JCS.Argon.Services.Soap.Opentext.FileAtts fileAtts, System.IO.Stream contents)
        {
            this.OTAuthentication = OTAuthentication;
            this.contextID = contextID;
            this.fileAtts = fileAtts;
            this.contents = contents;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadContentResponse", WrapperNamespace="urn:Core.service.livelink.opentext.com", IsWrapped=true)]
    public partial class UploadContentResponse
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn:api.ecm.opentext.com")]
        public JCS.Argon.Services.Soap.Opentext.OTAuthentication OTAuthentication;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:Core.service.livelink.opentext.com", Order=0)]
        public string UploadContentResult;
        
        public UploadContentResponse()
        {
        }
        
        public UploadContentResponse(JCS.Argon.Services.Soap.Opentext.OTAuthentication OTAuthentication, string UploadContentResult)
        {
            this.OTAuthentication = OTAuthentication;
            this.UploadContentResult = UploadContentResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ContentServiceChannel : JCS.Argon.Services.Soap.Opentext.ContentService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ContentServiceClient : System.ServiceModel.ClientBase<JCS.Argon.Services.Soap.Opentext.ContentService>, JCS.Argon.Services.Soap.Opentext.ContentService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ContentServiceClient() : 
                base(ContentServiceClient.GetDefaultBinding(), ContentServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ContentService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        public ContentServiceClient(string remoteAddress) : 
                        base(ContentServiceClient.GetDefaultBinding(), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ContentService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
    
        public ContentServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ContentServiceClient.GetBindingForEndpoint(endpointConfiguration), ContentServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ContentServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ContentServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ContentServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ContentServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ContentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<JCS.Argon.Services.Soap.Opentext.DownloadContentResponse> JCS.Argon.Services.Soap.Opentext.ContentService.DownloadContentAsync(JCS.Argon.Services.Soap.Opentext.DownloadContentRequest request)
        {
            return base.Channel.DownloadContentAsync(request);
        }
        
        public System.Threading.Tasks.Task<JCS.Argon.Services.Soap.Opentext.DownloadContentResponse> DownloadContentAsync(JCS.Argon.Services.Soap.Opentext.OTAuthentication OTAuthentication, string contextID)
        {
            JCS.Argon.Services.Soap.Opentext.DownloadContentRequest inValue = new JCS.Argon.Services.Soap.Opentext.DownloadContentRequest();
            inValue.OTAuthentication = OTAuthentication;
            inValue.contextID = contextID;
            return ((JCS.Argon.Services.Soap.Opentext.ContentService)(this)).DownloadContentAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<JCS.Argon.Services.Soap.Opentext.UploadContentResponse> JCS.Argon.Services.Soap.Opentext.ContentService.UploadContentAsync(JCS.Argon.Services.Soap.Opentext.UploadContentRequest request)
        {
            return base.Channel.UploadContentAsync(request);
        }
        
        public System.Threading.Tasks.Task<JCS.Argon.Services.Soap.Opentext.UploadContentResponse> UploadContentAsync(JCS.Argon.Services.Soap.Opentext.OTAuthentication OTAuthentication, string contextID, JCS.Argon.Services.Soap.Opentext.FileAtts fileAtts, System.IO.Stream contents)
        {
            JCS.Argon.Services.Soap.Opentext.UploadContentRequest inValue = new JCS.Argon.Services.Soap.Opentext.UploadContentRequest();
            inValue.OTAuthentication = OTAuthentication;
            inValue.contextID = contextID;
            inValue.fileAtts = fileAtts;
            inValue.contents = contents;
            return ((JCS.Argon.Services.Soap.Opentext.ContentService)(this)).UploadContentAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ContentService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding(BasicHttpSecurityMode.Transport);
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ContentService))
            {
                return new System.ServiceModel.EndpointAddress("http://ryleh/cws/ContentService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ContentServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ContentService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ContentServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ContentService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ContentService,
        }
    }
}
